Given a binary search tree (BST), find the lowest common ancestor (LCA) of 
two given nodes in the BST.

According to the definition of LCA on Wikipedia: 
¡°The lowest common ancestor is defined between two nodes v and w as the lowest node in T that 
has both v and w as descendants (where we allow a node to be a descendant of itself).¡±

        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. 
Another example is LCA of nodes 2 and 4 is 2, 
since a node can be a descendant of itself according to the LCA definition.

solution:
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
     public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {  
        if(root==null || p==null || q==null) return null;  
          
        List<TreeNode> pathp = new ArrayList<>();  
        List<TreeNode> pathq = new ArrayList<>();  
        pathp.add(root);  
        pathq.add(root);  
          
        getPath(root, p, pathp);  
        getPath(root, q, pathq);  
          
        TreeNode lca = null;  
        for(int i=0; i<pathp.size() && i<pathq.size(); i++) {  
            if(pathp.get(i) == pathq.get(i)) lca = pathp.get(i);  
            else break;  
        }  
        return lca;  
    }  
      
    private boolean getPath(TreeNode root, TreeNode n, List<TreeNode> path) {  
        if(root==n) {  
            return true;  
        }  
          
        if(root.left!=null) {  
            path.add(root.left);  
            if(getPath(root.left, n, path)) return true;  
            path.remove(path.size()-1);  
        }  
          
        if(root.right!=null) {  
            path.add(root.right);  
            if(getPath(root.right, n, path)) return true;  
            path.remove(path.size()-1);  
        }  
          
        return false;  
    }  
}