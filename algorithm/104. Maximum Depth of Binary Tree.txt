Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node 
down to the farthest leaf node.
Subscribe to see which companies asked this question.
求二叉树最大深度
solution：
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<Integer> a = new ArrayList<Integer>();
    public int maxDepth(TreeNode root) {
        if(root==null)
        return 0;
        int max= 0;
        count(root,1);
        for(int i =0;i<a.size();i++){
            if(a.get(i)>max){
                max=a.get(i);
            }
        }
        return max;
    }
    public int count(TreeNode root,int index){
        if(root.left ==null&&root.right ==null)
        {
        System.out.println(Integer.toString(index));
        a.add(index);
        return index;
        }
        else {
            if(root.left!=null){
            a.add(count(root.left,index+1));
            }
            if(root.right!=null){
                a.add(count(root.right,index+1));
            }
        }
        return index;     
    }
}
List<Integer> a = new ArrayList<Integer>();
Integer来表示整数而不是int
简单做法：
public class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null)
        return 0;
        int left = maxDepth(root.left);  
        int right = maxDepth(root.right); 
        if(left>=right)
        return 1+left;
        else
        return right+1;
    }
}